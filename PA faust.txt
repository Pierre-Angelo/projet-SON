import("stdfaust.lib");

/*myDrop(f0,trig) = os.osc(f *0.5 + f*en.asr(0.02,1,0.05,trig)) * en.asr(0.02,1,0.008,trig) 
    with {
        damp = 0.043*f0 + 0.0014*f0^(3/2);
        f = f0*(1+sigma*time);
        sigma = eta * damp;
        eta = 0.075;
        time = 0 : (select2(trig>trig'):+(1)) ~ _ : ba.samp2sec;
    };

fgoutte = hslider("freqgoutte",1,1,10,1);
samGoutte = (1/fgoutte)*48000;

rain(density,level) = no.multinoise(1) : par(i, 1, drop) : par(i, 1, *(level))
    with {
        drop = _ <: @(1), (abs < density) : * ;
    }; 

goutte =  ba.pulsen(0.1*48000,samGoutte) : myDrop(hslider("pitch",200,200,2000,1)) <:  dm.freeverb_demo  ;

*/

rainIntensity = hslider("rainIntensity",1,0,1,0.001 );

freqGain = (1/(60 *rainIntensity))*48000;

inverse = _,_ <: !,_,_,!;
sel =_,_,_:inverse,_ :select2;
pulsedNoise = no.noise <: _* ba.pulse(freqGain),_ ; 
rndGain = pulsedNoise: != (0) ,_:sel ~_;
varNoise = no.noise*0.5  + (no.noise*rndGain)*0.20 ;


rndFilter = fi.lowpass(3,500 + 4000 *rainIntensity + pow(2,rainIntensity*11) + abs(no.noise)*100 *rainIntensity) : fi.highpass(3,500);

lowRndFilter = fi.lowpass(3,500 + 4000 *rainIntensity + pow(2,rainIntensity*11) + abs(no.noise)*100 *rainIntensity) : fi.highpass(3,500) ;

oneVocoderBand(band,bandsNumb,bwRatio,bandGain,x) = x : fi.resonbp(bandFreq,bandQ,bandGain) with {
        bandFreq = 200+pow(2,(band+1)*0.5);
        BW = (bandFreq - 80+pow(2,(band+1)*0.5))*bwRatio;
        bandQ = bandFreq/BW;
};

vocoder(nBands,att,rel,BWRatio,source,excitation) = source <: par(i,nBands,oneVocoderBand(i,nBands,BWRatio,1) :
	an.amp_follower_ar(att,rel) : _,excitation : oneVocoderBand(i,nBands,BWRatio)) :> _ ;

boil = varNoise : vocoder(23,0.001,0.001,0.5,no.noise) : rndFilter *0.6 ;

lowBoil = no.pink_noise : vocoder(20,0.001,0.001,0.5,no.pink_noise) : lowRndFilter *0.5;

base = no.pink_noise: fi.lowpass(3,4000 + 6000*rainIntensity)*0.5 ;

process = (base + boil + lowBoil) * (rainIntensity*0.5+0.5)   <: _,_;
 






