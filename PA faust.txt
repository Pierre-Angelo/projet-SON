import("stdfaust.lib");

/*tones = hslider("ton",1,1,300,1);
//sq = os.square(15)/4 +0.5  ;
pitch = ef.transpose(10,2,tones);
range = hslider("freq",100,100,5000,1);
bande = fi.bandpass(1,10,range);
gate = button("gate");*/


myDrop(f0,trig) = os.osc(f *0.5 + f*en.asr(0.02,1,0.05,trig)) * en.asr(0.02,1,0.008,trig) 
    with {
        damp = 0.043*f0 + 0.0014*f0^(3/2);
        f = f0*(1+sigma*time);
        sigma = eta * damp;
        eta = 0.075;
        time = 0 : (select2(trig>trig'):+(1)) ~ _ : ba.samp2sec;
    };



range = hslider("freq",100,100,5000,1);
rndfilter = fi.lowpass(2,abs(no.noise)*range);

freqGain = (1)*48000;
fgoutte = hslider("freqgoutte",1,1,10,1);
samGoutte = (1/fgoutte)*48000;

inverse = _,_ <: !,_,_,!;
sel =_,_,_:inverse,_ :select2;
pulsedNoise = no.noise <: _* ba.pulse(freqGain),_ ; 
rndGain = pulsedNoise: != (0) ,_:sel ~_;
varNoise = no.noise*0.5  + (no.noise*rndGain)*0.20 ;

//seqPeak = seq(i,40,fi.peak_eq(10,50*(i+1)+no.noise*10,10));

rain(density,level) = no.multinoise(1) : par(i, 1, drop) : par(i, 1, *(level))
    with {
        drop = _ <: @(1), (abs < density) : * ;
    }; 

goutte =  ba.pulsen(0.1*48000,samGoutte) : myDrop(hslider("pitch",200,200,2000,1)) <:  dm.freeverb_demo  ;

process = goutte;
//process =  (varNoise : rndfilter + varNoise*0.5 )*0.2 + rain(60 / 1000,0.2) <:  par(i,2,_+goutte) : dm.freeverb_demo ;

//process = no.noise +no.pink_noise : rndfilter/2 <: _,_ ;




